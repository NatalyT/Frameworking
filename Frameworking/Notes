

2016 05 05 XCode 7.3
**** Found this here for Integerating Swift into an Objective C project (within the same module)
http://stackoverflow.com/questions/24206732/cant-use-swift-classes-inside-objective-c


Step by step swift integration for Xcode Objc-based project:
Create new *.swift file (in Xcode) or add it by using Finder

((( I selected to add bridging header when I created created my .swift class)))

Add swift bridging empty header if Xcode have not done this before (see 4 below)
Implement your Swift class by using @objc attribute:
import UIKit

@objc class Hello: NSObject {
func sayHello() {
print("Hi there!")
}
}
Open Build Settings for the App Target and check these parameters:
Product Module Name : myproject
Defines Module : YES
Embedded Content Contains Swift : YES
Install Objective-C Compatibility Header : YES
Objective-C Bridging Header : $(SRCROOT)/Sources/SwiftBridging.h
Import header-> #import "myproject-Swift.h" (which is auto generated by Xcode) in your *.m file

Clean and rebuild your Xcode project
Profit!

**** Now all of that is to get swift and Objective C to work together in the same module.. I left all this in my objective C project while doing the following (including leaving the bridging header in the project)  to allow an Objective C module to access code in another Module (coded in Swift)..
1.  To make thing easy, you can create the framework right there from within the project
  File > New > Target > iOS > Framework & Library > Cocoa Touch Framework
.. which will do the following for you:
  a. add embedded binaries to the App Target (Target> General > Embedded Binaries)
  b. add Linked Framework to the App Target (Target > General > Linked Framework and Libraries)
  c. add Dependency to the App Target (Target > Build Phases> Target Dependencies
  d. add Linked Libraries to the App Target (Target > Build Phases> Linked Libraries and Binaries
I believe you can add the Swift framework post creation to the objective C project

Next I added the classes I wanted to communicate to the Linked framework to the Project-Bridging-Header.h file with an #import "Class.h" statement. Unsure if this is needed at this point.

Next ensure the swift framework classes that you want to communicate with has the following:

@objc decleration
public class decleration
(maybe) is a child of NSObject and Objective C can be a type of.
every variable and function you wish to allow visible to the Objective C class must be declared public.

Finally in the .h file of the objective C class you are referencing from, declare
@import MODULENAME

I also initially # include MODULENAME.h file in the .m of the class, but found I could comment out and was still able to find the Swift class files and functions.

Before I did this everytime I attemped to reference the Swift Class object I would get a compile error of "Use of undeclared identifier"


****update
To add an existing framework, so far what works is to create the framework inside the project and then import the classes individually.  Any files that the framework cannot find can be added manually.  

